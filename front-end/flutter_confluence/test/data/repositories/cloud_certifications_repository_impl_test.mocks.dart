// Mocks generated by Mockito 5.0.10 from annotations
// in flutter_confluence/test/data/repositories/cloud_certifications_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:flutter_confluence/core/network/network_info.dart' as _i6;
import 'package:flutter_confluence/data/datasources/cloud_certification_local_data_source.dart'
    as _i5;
import 'package:flutter_confluence/data/datasources/cloud_certification_remote_data_source.dart'
    as _i2;
import 'package:flutter_confluence/data/models/cloud_certification_model.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

/// A class which mocks [CloudCertificationRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCloudCertificationRemoteDataSource extends _i1.Mock
    implements _i2.CloudCertificationRemoteDataSource {
  MockCloudCertificationRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.CloudCertificationModel>> getCompletedCertifications() =>
      (super.noSuchMethod(Invocation.method(#getCompletedCertifications, []),
              returnValue: Future<List<_i4.CloudCertificationModel>>.value(
                  <_i4.CloudCertificationModel>[]))
          as _i3.Future<List<_i4.CloudCertificationModel>>);
  @override
  _i3.Future<List<_i4.CloudCertificationModel>> getInProgressCertifications() =>
      (super.noSuchMethod(Invocation.method(#getInProgressCertifications, []),
              returnValue: Future<List<_i4.CloudCertificationModel>>.value(
                  <_i4.CloudCertificationModel>[]))
          as _i3.Future<List<_i4.CloudCertificationModel>>);
}

/// A class which mocks [CloudCertificationLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCloudCertificationLocalDataSource extends _i1.Mock
    implements _i5.CloudCertificationLocalDataSource {
  MockCloudCertificationLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.CloudCertificationModel>> getCompletedCertifications() =>
      (super.noSuchMethod(Invocation.method(#getCompletedCertifications, []),
              returnValue: Future<List<_i4.CloudCertificationModel>>.value(
                  <_i4.CloudCertificationModel>[]))
          as _i3.Future<List<_i4.CloudCertificationModel>>);
  @override
  _i3.Future<List<_i4.CloudCertificationModel>> getInProgressCertifications() =>
      (super.noSuchMethod(Invocation.method(#getInProgressCertifications, []),
              returnValue: Future<List<_i4.CloudCertificationModel>>.value(
                  <_i4.CloudCertificationModel>[]))
          as _i3.Future<List<_i4.CloudCertificationModel>>);
  @override
  _i3.Future<void> saveCompletedCertifications(
          List<_i4.CloudCertificationModel>? certifications) =>
      (super.noSuchMethod(
          Invocation.method(#saveCompletedCertifications, [certifications]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> saveInProgressCertifications(
          List<_i4.CloudCertificationModel>? certifications) =>
      (super.noSuchMethod(
          Invocation.method(#saveInProgressCertifications, [certifications]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i6.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
}
