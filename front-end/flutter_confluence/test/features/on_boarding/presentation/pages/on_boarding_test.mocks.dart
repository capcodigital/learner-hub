// Mocks generated by Mockito 5.0.10 from annotations
// in flutter_confluence/test/features/on_boarding/presentation/pages/on_boarding_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:bloc/src/bloc.dart' as _i9;
import 'package:bloc/src/transition.dart' as _i8;
import 'package:dartz/dartz.dart' as _i6;
import 'package:flutter_confluence/core/error/failures.dart' as _i7;
import 'package:flutter_confluence/features/onboarding/domain/usecases/auth_use_case.dart'
    as _i2;
import 'package:flutter_confluence/features/onboarding/domain/usecases/check_auth_use_case.dart'
    as _i3;
import 'package:flutter_confluence/features/onboarding/presentation/bloc/on_boarding_bloc.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeAuthUseCase extends _i1.Fake implements _i2.AuthUseCase {}

class _FakeCheckAuthUseCase extends _i1.Fake implements _i3.CheckAuthUseCase {}

class _FakeOnBoardingState extends _i1.Fake implements _i4.OnBoardingState {}

class _FakeStreamSubscription<T> extends _i1.Fake
    implements _i5.StreamSubscription<T> {}

/// A class which mocks [OnBoardingBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockOnBoardingBloc extends _i1.Mock implements _i4.OnBoardingBloc {
  MockOnBoardingBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthUseCase get authUseCase =>
      (super.noSuchMethod(Invocation.getter(#authUseCase),
          returnValue: _FakeAuthUseCase()) as _i2.AuthUseCase);
  @override
  _i3.CheckAuthUseCase get checkAuthUseCase =>
      (super.noSuchMethod(Invocation.getter(#checkAuthUseCase),
          returnValue: _FakeCheckAuthUseCase()) as _i3.CheckAuthUseCase);
  @override
  _i4.OnBoardingState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeOnBoardingState()) as _i4.OnBoardingState);
  @override
  _i5.Stream<_i4.OnBoardingState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i4.OnBoardingState>.empty())
          as _i5.Stream<_i4.OnBoardingState>);
  @override
  _i5.Stream<_i4.OnBoardingState> mapEventToState(_i4.OnBoardingEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i4.OnBoardingState>.empty())
          as _i5.Stream<_i4.OnBoardingState>);
  @override
  _i5.Stream<_i4.OnBoardingState> getState(
          _i6.Either<_i7.Failure, bool>? arg) =>
      (super.noSuchMethod(Invocation.method(#getState, [arg]),
              returnValue: Stream<_i4.OnBoardingState>.empty())
          as _i5.Stream<_i4.OnBoardingState>);
  @override
  void add(_i4.OnBoardingEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i4.OnBoardingEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i5.Stream<
      _i8.Transition<_i4.OnBoardingEvent, _i4.OnBoardingState>> transformEvents(
          _i5.Stream<_i4.OnBoardingEvent>? events,
          _i9.TransitionFunction<_i4.OnBoardingEvent, _i4.OnBoardingState>?
              transitionFn) =>
      (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue:
                  Stream<_i8.Transition<_i4.OnBoardingEvent, _i4.OnBoardingState>>.empty())
          as _i5.Stream<
              _i8.Transition<_i4.OnBoardingEvent, _i4.OnBoardingState>>);
  @override
  void emit(_i4.OnBoardingState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i8.Transition<_i4.OnBoardingEvent, _i4.OnBoardingState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i5.Stream<
      _i8.Transition<_i4.OnBoardingEvent, _i4.OnBoardingState>> transformTransitions(
          _i5.Stream<_i8.Transition<_i4.OnBoardingEvent, _i4.OnBoardingState>>?
              transitions) =>
      (super.noSuchMethod(
              Invocation.method(#transformTransitions, [transitions]),
              returnValue:
                  Stream<_i8.Transition<_i4.OnBoardingEvent, _i4.OnBoardingState>>.empty())
          as _i5.Stream<
              _i8.Transition<_i4.OnBoardingEvent, _i4.OnBoardingState>>);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i5.StreamSubscription<_i4.OnBoardingState> listen(
          void Function(_i4.OnBoardingState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription<_i4.OnBoardingState>())
          as _i5.StreamSubscription<_i4.OnBoardingState>);
  @override
  void onChange(_i8.Change<_i4.OnBoardingState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}
