// Mocks generated by Mockito 5.0.10 from annotations
// in flutter_confluence/test/features/on_boarding/presentation/bloc/on_boarding_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter_confluence/core/error/failures.dart' as _i6;
import 'package:flutter_confluence/core/usecases/usecase.dart' as _i7;
import 'package:flutter_confluence/features/onboarding/domain/repositories/on_boarding_repository.dart'
    as _i2;
import 'package:flutter_confluence/features/onboarding/domain/usecases/authenticate_use_case.dart'
    as _i4;
import 'package:flutter_confluence/features/onboarding/domain/usecases/check_cached_auth_use_case.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeOnBoardingRepository extends _i1.Fake
    implements _i2.OnBoardingRepository {}

class _FakeEither<L, R> extends _i1.Fake implements _i3.Either<L, R> {
  @override
  String toString() => super.toString();
}

/// A class which mocks [AuthenticateUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticateUseCase extends _i1.Mock
    implements _i4.AuthenticateUseCase {
  MockAuthenticateUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.OnBoardingRepository get repository => (super.noSuchMethod(
      Invocation.getter(#repository),
      returnValue: _FakeOnBoardingRepository()) as _i2.OnBoardingRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call(_i7.NoParams? noParams) =>
      (super.noSuchMethod(Invocation.method(#call, [noParams]),
              returnValue: Future<_i3.Either<_i6.Failure, bool>>.value(
                  _FakeEither<_i6.Failure, bool>()))
          as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [CheckCachedAuthUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckCachedAuthUseCase extends _i1.Mock
    implements _i8.CheckCachedAuthUseCase {
  MockCheckCachedAuthUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.OnBoardingRepository get repository => (super.noSuchMethod(
      Invocation.getter(#repository),
      returnValue: _FakeOnBoardingRepository()) as _i2.OnBoardingRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call(_i7.NoParams? noParams) =>
      (super.noSuchMethod(Invocation.method(#call, [noParams]),
              returnValue: Future<_i3.Either<_i6.Failure, bool>>.value(
                  _FakeEither<_i6.Failure, bool>()))
          as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}
