openapi: 3.0.0
info:
  title: Flutter API
  version: 1.0.0
servers:
  - url: http://localhost:5001/io-capco-flutter-dev/us-central1/app
    description: localhost
  - url: https://us-central1-io-capco-flutter-dev.cloudfunctions.net/app
    description: Production URL
paths:
  /user:
    post:
      tags:
        - Users
      summary: Registers a user
      description: Registers the user in the DB and links it with Firebase Auth
      operationId: 'registerUser'
      security:
        - JWTAuth: []
      requestBody:
        description: A JSON object containing user information required to register
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - lastName
                - email
                - jobTitle
                - bio
                - skills
              properties:
                name:
                  type: string
                lastName:
                  type: integer
                email:
                  type: string
                  format: email
                jobtitle:
                  type: string
                bio:
                  type: string
                skills:
                  $ref: '#/components/schemas/Skills'
            example:
              name: Luke
              lastName: Skywalker
              email: luke.skywalker@capco.com
              jobtTitle: Master Jedi
              bio: Trained by Joda in planet Dagobah
              skills: {primarySkills: ["Control the force"], secondarySkills: ["Lightsaber", "Mind control"]}
              
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                status: error
                error: User already registered
        '500':
          $ref: '#/components/responses/InternalServerError'

  /certifications:
    get:
      tags: 
        - Certifications
      summary: 'Returns a list of available certifications'
      operationId: 'getAllCertifications'
      security:
        - JWTAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Certification'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /certifications/{id}:
    get:
      tags: 
        - Certifications
      summary: "Find certification by ID"
      description: "Returns a single certification"
      operationId: "getCertificationById"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of certification to return"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Certification"
        "400":
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: "Certification not found"
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - JWTAuth: []
components:
  schemas:
    Certification:
      type: object
      required:
        - id
        - category
        - platform
        - title
        - description
      properties:
        id:
          type: string
          format: uuid
        category:
          type: string
        platform:
          type: string
        title:
          type: string
        description:
          type: string
    Skills:
      type: object
      required:
        - primarySkills,
        - secondarySkills
      properties:
        primarySkills:
          type: array
          items:
            type: string
        secondarySkills:
          type: array
          items:
            type: string
    User:
      type: object
      required:
        - id
        - name
        - lastName
        - email
        - jobTitle
        - bio
        - skills
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        lastName:
          type: integer
        email:
          type: string
          format: email
        jobtitle:
          type: string
        bio:
          type: string
        skills:
          $ref: '#/components/schemas/Skills'
    Todo:
      type: object
      required:
        - id
        - userId
        - title
        - content
        - isCompleted
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        title:
          type: integer
        content:
          type: string
        isCompleted:
          type: boolean
    UserCertification:
      type: object
      required:
        - id
        - userId
        - certificationId
        - isCompleted
        - startDate
        - completionDate
        - expireDate
        - rating
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        certificationId:
          type: string
          format: uuid
        isCompleted:
          type: boolean
        startDate:
          type: string
          format: date
          nullable: true
        completionDate:
          type: boolean
          nullable: true
        expireDate:
          type: boolean
          nullable: true
        rating:
          type: integer
          nullable: true
    Response:
      type: object
      required:
        - status
        - data
        - error
      properties:
        status:
          type: string
          enum:
            - success
            - fail
            - error
          description: >
            Response status:
              * `success` - All went well, and (usually) some data was returned.
              * `fail` - There was a problem with the data submitted, or some pre-condition of the API call wasn't satisfied
              * `error` - An error occurred in processing the request, i.e. an exception was thrown
        data:
          type: object
          nullable: true
        error:
          type: string
          nullable: true
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |-
        Example: 
        > Authorization: Bearer <token>
  headers: {}
  responses:
      BadRequestError:
        description: Bad Request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Response'
            example:
              status: error
              error: Bad Request
      UnauthorizedError:
        description: Access token is missing or invalid
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Response'
            example:
              status: error
              error: Unauthorized
      InternalServerError:
        description: Internal Server Error
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Response'
            example:
              status: error
              error: Internal Server Error

  requestBodies: {}
  parameters: {}
security:
  - JWTAuth: []
tags: []
